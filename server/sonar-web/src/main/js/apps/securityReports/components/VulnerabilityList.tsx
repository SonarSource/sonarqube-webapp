/*
 * SonarQube
 * Copyright (C) 2009-2018 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
import * as React from 'react';
import * as classNames from 'classnames';
import { Link } from 'react-router';
import { translate } from '../../../helpers/l10n';
import { SecurityHotspot, Component, BranchLike, IssueType } from '../../../app/types';
import Rating from '../../../components/ui/Rating';
import { getComponentIssuesUrl } from '../../../helpers/urls';
import { getBranchLikeQuery } from '../../../helpers/branches';
import HelpTooltip from '../../../components/controls/HelpTooltip';
import VulnerabilityIcon from '../../../components/icons-components/VulnerabilityIcon';
import SecurityHotspotIcon from '../../../components/icons-components/SecurityHotspotIcon';
import {
  renderOwaspTop10Category,
  renderSansTop25Category,
  renderCWECategory,
  Standards
} from '../utils';
import DetachIcon from '../../../components/icons-components/DetachIcon';
import Tooltip from '../../../components/controls/Tooltip';
import { getRatingTooltip } from '../../../helpers/measures';

interface Props {
  branchLike?: BranchLike;
  component: Component;
  findings: Array<SecurityHotspot>;
  showCWE: boolean;
  type: 'owaspTop10' | 'sansTop25' | 'cwe';
}

interface State {
  standards: Standards;
}

export default class VulnerabilityList extends React.PureComponent<Props, State> {
  mounted = false;
  state: State = { standards: { owaspTop10: {}, sansTop25: {}, cwe: {} } };

  componentDidMount() {
    this.mounted = true;
    this.loadStandards();
  }

  componentWillUnmount() {
    this.mounted = false;
  }

  loadStandards = () => {
    import('../../../helpers/standards.json')
      .then(x => x.default)
      .then(
        ({ owaspTop10, sansTop25, cwe }: Standards) => {
          if (this.mounted) {
            this.setState({ standards: { owaspTop10, sansTop25, cwe } });
          }
        },
        () => {}
      );
  };

  getName(finding: SecurityHotspot, type: 'owaspTop10' | 'sansTop25' | 'cwe') {
    const category = finding.category || finding.cwe || 'unknown';
    const renderers = {
      owaspTop10: renderOwaspTop10Category,
      sansTop25: renderSansTop25Category,
      cwe: renderCWECategory
    };
    return (
      <>
        {renderers[type](this.state.standards, category)}
        {this.state.standards[type][category] &&
          this.state.standards[type][category].description && (
            <HelpTooltip
              className="spacer-left"
              overlay={this.renderOverlay(this.state.standards[type][category].description)}
            />
          )}
      </>
    );
  }

  renderOverlay = (description: string | undefined) => {
    return (
      <>
        <p>{description}</p>
        <hr className="spacer-top spacer-bottom" />
        {translate('learn_more')}:
        <Link
          className="spacer-left"
          target="_blank"
          to={{ pathname: '/documentation/security-reports' }}>
          Security Reports
        </Link>
        <DetachIcon
          className="little-spacer-left little-spacer-right vertical-baseline"
          size={12}
        />
      </>
    );
  };

  renderFinding(
    finding: SecurityHotspot,
    isCWE?: boolean,
    parent?: SecurityHotspot
  ): React.ReactFragment {
    const { branchLike, component, type } = this.props;
    const params: { [name: string]: string | undefined } = {
      ...getBranchLikeQuery(branchLike),
      types: IssueType.Hotspot
    };
    if (isCWE && parent) {
      params['cwe'] = finding.cwe;
      params[type] = parent.category;
    } else {
      params[type] = finding.category;
    }

    const subFindings =
      this.props.showCWE && finding.distribution
        ? finding.distribution.map(f => this.renderFinding(f, true, finding))
        : null;

    const title = getRatingTooltip('security_rating', finding.vulnerabilityRating || 1);
    return (
      <React.Fragment key={finding.category || finding.cwe}>
        <tr>
          <td className={classNames({ 'cwe-title-cell': isCWE })}>
            {this.getName(finding, isCWE ? 'cwe' : type)}
          </td>
          <td className="text-right">
            <div className="display-inline-flex-center">
              <Link
                to={getComponentIssuesUrl(component.key, {
                  ...params,
                  types: IssueType.Vulnerability,
                  resolved: 'false'
                })}>
                {finding.vulnerabilities}
              </Link>
              <Tooltip overlay={title}>
                <Link
                  className="link-no-underline spacer-left"
                  to={getComponentIssuesUrl(component.key, {
                    ...params,
                    types: IssueType.Vulnerability,
                    resolved: 'false'
                  })}>
                  <Rating value={finding.vulnerabilityRating || 1} />
                </Link>
              </Tooltip>
            </div>
          </td>
          <td className="text-right security-column-separator">
            <Link
              to={getComponentIssuesUrl(component.key, {
                ...params,
                types: IssueType.Hotspot,
                resolved: 'false',
                statuses: 'OPEN,REOPENED'
              })}>
              {finding.openSecurityHotspots}
            </Link>
          </td>
          <td className="text-right">
            <Link
              to={getComponentIssuesUrl(component.key, {
                ...params,
                types: IssueType.Hotspot,
                resolutions: 'FIXED',
                statuses: 'RESOLVED'
              })}>
              {finding.toReviewSecurityHotspots}
            </Link>
          </td>
          <td className="text-right">
            <Link
              to={getComponentIssuesUrl(component.key, {
                ...params,
                types: IssueType.Hotspot,
                resolutions: 'WONTFIX',
                statuses: 'RESOLVED'
              })}>
              {finding.wontFixSecurityHotspots}
            </Link>
          </td>
        </tr>
        {subFindings}
      </React.Fragment>
    );
  }

  render() {
    return (
      <div className="boxed-group boxed-group-inner spacer-top">
        <table className="data zebra security-reports">
          <thead>
            <tr>
              <th className="security-category-column">
                {translate('security_reports.list.categories')}
              </th>
              <th className="security-result-column text-right">
                <div className="display-inline-flex-center">
                  <VulnerabilityIcon className="spacer-right" />
                  {translate('security_reports.list.vulnerabilities')}
                </div>
              </th>
              <th className="text-right security-column-separator" colSpan={3}>
                <div className="display-inline-flex-center">
                  <SecurityHotspotIcon className="spacer-right" />
                  {translate('security_reports.list.hotspots')}
                </div>
              </th>
            </tr>
            <tr className="subheader">
              <th colSpan={2} />
              <th className="text-right security-result-column security-column-separator">
                {translate('security_reports.line.open')}
              </th>
              <th className="text-right security-result-column">
                {translate('security_reports.line.in_review')}
              </th>
              <th className="text-right security-result-column">
                {translate('security_reports.line.wont_fix')}
              </th>
            </tr>
          </thead>
          <tbody>{this.props.findings.map(finding => this.renderFinding(finding))}</tbody>
        </table>
      </div>
    );
  }
}
